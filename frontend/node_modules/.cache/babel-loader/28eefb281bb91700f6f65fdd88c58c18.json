{"ast":null,"code":"const LOAD_BUSINESSES = 'businesses/loadBusiness';\nconst LOAD_PHOTOS = 'photos/loadPhotos';\nconst LOAD_ONE_BIZ = 'business/loadOneBiz';\n\nconst loadBusiness = businesses => ({\n  type: LOAD_BUSINESSES,\n  businesses\n});\n\nconst loadPhotos = photos => ({\n  type: LOAD_PHOTOS,\n  photos\n});\n\nconst loadOneBusiness = (business, photo) => ({\n  type: LOAD_ONE_BIZ,\n  business,\n  photo\n});\n\nexport const getBusinesses = () => async dispatch => {\n  const response = await fetch('/api/businesses');\n  const businesses = await response.json();\n  dispatch(loadBusiness(businesses));\n  return response;\n};\nexport const getPhotos = () => async dispatch => {\n  const response = await fetch('/api/businesses/photos');\n  const photos = await response.json();\n  dispatch(loadPhotos(photos));\n  return response;\n};\nexport const getOneBusiness = id => async dispatch => {\n  const response = await fetch(`/api/businesses/${id}`);\n  const business = await response.json();\n  console.log(\"This is the business whole: \", business);\n  console.log(\"This is the business: \", ({\n    business\n  } = business));\n  console.log(\"This is the business whole: \", business);\n  dispatch(loadOneBusiness(business, photo));\n  return response;\n};\nconst initialState = {};\n\nconst businessReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_BUSINESSES:\n      const newState = { ...state\n      };\n      action.businesses.forEach(business => {\n        newState[business.id] = business;\n      });\n      return newState;\n\n    case LOAD_PHOTOS:\n      const photoState = { ...state\n      };\n      action.photos.forEach(photo => {\n        photoState[photo.id] = photo;\n      });\n      return photoState;\n\n    case LOAD_ONE_BIZ:\n      const oneBizState = { ...state\n      };\n      oneBizState[action.business.id] = action.business;\n      return oneBizState;\n\n    default:\n      return state;\n  }\n};\n\nexport default businessReducer;","map":{"version":3,"sources":["/Users/dusty/kelp/frontend/src/store/businesses.js"],"names":["LOAD_BUSINESSES","LOAD_PHOTOS","LOAD_ONE_BIZ","loadBusiness","businesses","type","loadPhotos","photos","loadOneBusiness","business","photo","getBusinesses","dispatch","response","fetch","json","getPhotos","getOneBusiness","id","console","log","initialState","businessReducer","state","action","newState","forEach","photoState","oneBizState"],"mappings":"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","sourcesContent":["const LOAD_BUSINESSES = 'businesses/loadBusiness';\nconst LOAD_PHOTOS = 'photos/loadPhotos';\nconst LOAD_ONE_BIZ = 'business/loadOneBiz';\n\n\nconst loadBusiness = (businesses) => ({\n  type: LOAD_BUSINESSES,\n  businesses,\n});\n\nconst loadPhotos = (photos) => ({\n  type: LOAD_PHOTOS,\n  photos,\n})\n\nconst loadOneBusiness = (business, photo) => ({\n  type: LOAD_ONE_BIZ,\n  business,\n  photo,\n})\n\nexport const getBusinesses = () => async (dispatch) => {\n  const response = await fetch('/api/businesses');\n  const businesses = await response.json();\n  dispatch(loadBusiness(businesses));\n  return response\n};\n\nexport const getPhotos = () => async (dispatch) => {\n  const response = await fetch('/api/businesses/photos');\n  const photos = await response.json();\n  dispatch(loadPhotos(photos));\n  return response\n}\n\nexport const getOneBusiness = (id) => async (dispatch) => {\n  const response = await fetch(`/api/businesses/${id}`)\n  const business = await response.json();\n  console.log(\"This is the business whole: \", business)\n  console.log(\"This is the business: \", {business} = business)\n  console.log(\"This is the business whole: \", business)\n\n\n  dispatch(loadOneBusiness(business, photo));\n  return response\n\n}\n\n\nconst initialState = {};\n\nconst businessReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_BUSINESSES:\n      const newState = { ...state };\n      action.businesses.forEach(business => {\n        newState[business.id] = business;\n      });\n      return newState;\n    case LOAD_PHOTOS:\n      const photoState = { ...state };\n      action.photos.forEach(photo => {\n        photoState[photo.id] = photo;\n      });\n      return photoState;\n    case LOAD_ONE_BIZ:\n      const oneBizState = { ...state };\n        oneBizState[action.business.id] = action.business;\n      return oneBizState;\n    default:\n      return state;\n  }\n};\n\nexport default businessReducer;"]},"metadata":{},"sourceType":"module"}