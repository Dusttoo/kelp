{"ast":null,"code":"const LOAD_BUSINESSES = 'businesses/loadBusiness';\nconst LOAD_PHOTOS = 'photos/loadPhotos';\nconst ADD_ONE = 'businesses/addOne';\n\nconst loadBusiness = businesses => ({\n  type: LOAD_BUSINESSES,\n  businesses\n});\n\nconst loadPhotos = photos => ({\n  type: LOAD_PHOTOS,\n  photos\n});\n\nconst addOneBusiness = business => ({\n  type: ADD_ONE,\n  business\n});\n\nexport const getBusinesses = () => async dispatch => {\n  const response = await fetch('/api/businesses');\n  const businesses = await response.json();\n  dispatch(loadBusiness(businesses));\n  return response;\n};\nexport const getPhotos = () => async dispatch => {\n  const response = await fetch('/api/businesses/photos');\n  const photos = await response.json();\n  dispatch(loadPhotos(photos));\n  return response;\n};\nexport const getAddBusiness = payload => async dispatch => {\n  const response = await fetch('/api/businesses/add');\n};\nexport const addBusiness = payload => async dispatch => {\n  const response = await fetch('/api/businesses/add', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  console.log(\"POST RESPONSE:\", response);\n  const business = await response.json();\n  console.log(business);\n  dispatch(addOneBusiness(business));\n  return business;\n};\nconst initialState = {};\n\nconst businessReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_BUSINESSES:\n      const newState = { ...state\n      };\n      action.businesses.forEach(business => {\n        newState[business.id] = business;\n      });\n      return newState;\n\n    case LOAD_PHOTOS:\n      const photoState = { ...state\n      };\n      action.photos.forEach(photo => {\n        photoState[photo.id] = photo;\n      });\n      return photoState;\n\n    case ADD_ONE:\n      return { ...state,\n        entries: [...state.entries, action.article]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default businessReducer;","map":{"version":3,"sources":["/Users/dusty/kelp/frontend/src/store/businesses.js"],"names":["LOAD_BUSINESSES","LOAD_PHOTOS","ADD_ONE","loadBusiness","businesses","type","loadPhotos","photos","addOneBusiness","business","getBusinesses","dispatch","response","fetch","json","getPhotos","getAddBusiness","payload","addBusiness","method","headers","body","JSON","stringify","console","log","initialState","businessReducer","state","action","newState","forEach","id","photoState","photo","entries","article"],"mappings":"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","sourcesContent":["const LOAD_BUSINESSES = 'businesses/loadBusiness';\nconst LOAD_PHOTOS = 'photos/loadPhotos';\nconst ADD_ONE = 'businesses/addOne';\n\n\n\nconst loadBusiness = (businesses) => ({\n  type: LOAD_BUSINESSES,\n  businesses,\n});\n\nconst loadPhotos = (photos) => ({\n  type: LOAD_PHOTOS,\n  photos,\n})\n\nconst addOneBusiness = (business) => ({\n  type: ADD_ONE,\n  business,\n});\n\n\nexport const getBusinesses = () => async (dispatch) => {\n  const response = await fetch('/api/businesses');\n  const businesses = await response.json();\n  dispatch(loadBusiness(businesses));\n  return response\n};\n\nexport const getPhotos = () => async (dispatch) => {\n  const response = await fetch('/api/businesses/photos');\n  const photos = await response.json();\n  dispatch(loadPhotos(photos));\n  return response\n}\n\nexport const getAddBusiness = (payload) => async (dispatch) => {\n  const response = await fetch('/api/businesses/add', )\n}\n\nexport const addBusiness = (payload) => async (dispatch) => {\n  const response = await fetch('/api/businesses/add', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n  });\n\n  console.log(\"POST RESPONSE:\",response)\n\n  const business = await response.json();\n  console.log(business)\n  dispatch(addOneBusiness(business));\n  return business\n};\n\n\n\n\nconst initialState = {};\n\nconst businessReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_BUSINESSES:\n      const newState = { ...state };\n      action.businesses.forEach(business => {\n        newState[business.id] = business;\n      });\n      return newState;\n    case LOAD_PHOTOS:\n      const photoState = { ...state };\n      action.photos.forEach(photo => {\n        photoState[photo.id] = photo;\n      });\n      return photoState;\n    case ADD_ONE:\n      return { ...state, entries: [...state.entries, action.article] };\n    default:\n      return state;\n  }\n};\n\nexport default businessReducer;"]},"metadata":{},"sourceType":"module"}