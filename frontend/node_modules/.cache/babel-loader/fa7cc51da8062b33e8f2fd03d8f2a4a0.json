{"ast":null,"code":"var _jsxFileName = \"/Users/dusty/kelp/authenticate-me/frontend/src/components/SignupFormPage/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as sessionActions from \"../../store/session\";\nimport './SignupFormPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SignupFormPage() {\n  _s();\n\n  const dispatch = useDispatch();\n  const sessionUser = useSelector(state => state.session.user);\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [profileImg, setProfileImg] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  if (sessionUser) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 27\n  }, this);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (password === confirmPassword) {\n      setErrors([]);\n      return dispatch(sessionActions.signup({\n        email,\n        firstName,\n        lastName,\n        profileImg,\n        password\n      })).catch(async res => {\n        const data = await res.json();\n        if (data && data.errors) setErrors(data.errors);\n      });\n    }\n\n    return setErrors(['Confirm Password field must be the same as the Password field']);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: errors.map((error, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: error\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 49\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"First Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: firstName,\n        onChange: e => setFirstName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Last Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: lastName,\n        onChange: e => setLastName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Profile Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: profileImg,\n        onChange: e => setProfileImg(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Confirm Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 17\n  }, this);\n}\n\n_s(SignupFormPage, \"x8BbZn36wvqy7Y8QzfeLdsZ8ix8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = SignupFormPage;\nexport default SignupFormPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignupFormPage\");","map":{"version":3,"sources":["/Users/dusty/kelp/authenticate-me/frontend/src/components/SignupFormPage/index.js"],"names":["React","useState","useDispatch","useSelector","Redirect","sessionActions","SignupFormPage","dispatch","sessionUser","state","session","user","email","setEmail","firstName","setFirstName","lastName","setLastName","profileImg","setProfileImg","password","setPassword","confirmPassword","setConfirmPassword","errors","setErrors","handleSubmit","e","preventDefault","signup","catch","res","data","json","map","error","idx","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as sessionActions from \"../../store/session\";\nimport './SignupFormPage.css'\n\nfunction SignupFormPage() {\n  const dispatch = useDispatch();\n  const sessionUser = useSelector((state) => state.session.user);\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [profileImg, setProfileImg] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n\n  if (sessionUser) return <Redirect to=\"/\" />;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password === confirmPassword) {\n      setErrors([]);\n      return dispatch(sessionActions.signup({ email, firstName, lastName, profileImg, password }))\n        .catch(async (res) => {\n          const data = await res.json();\n          if (data && data.errors) setErrors(data.errors);\n        });\n    }\n    return setErrors(['Confirm Password field must be the same as the Password field']);\n  };\n\n  return (\n                <form onSubmit={handleSubmit}>\n                  <ul>\n                    {errors.map((error, idx) => <li key={idx}>{error}</li>)}\n                  </ul>\n                  <label>\n                    Email\n                    <input\n                      type=\"text\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      required\n                    />\n                  </label>\n                  <label>\n                    First Name\n                    <input\n                      type=\"text\"\n                      value={firstName}\n                      onChange={(e) => setFirstName(e.target.value)}\n                      required\n                    />\n                  </label>\n                  <label>\n                    Last Name\n                    <input\n                      type=\"text\"\n                      value={lastName}\n                      onChange={(e) => setLastName(e.target.value)}\n                      required\n                    />\n                  </label>\n                  <label>\n                    Profile Image\n                    <input\n                      type=\"text\"\n                      value={profileImg}\n                      onChange={(e) => setProfileImg(e.target.value)}\n                      required\n                    />\n                  </label>\n                  <label>\n                    Password\n                    <input\n                      type=\"password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      required\n                    />\n                  </label>\n                  <label>\n                    Confirm Password\n                    <input\n                      type=\"password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      required\n                    />\n                  </label>\n                  <button type=\"submit\">Sign Up</button>\n                </form>\n  );\n}\n\nexport default SignupFormPage;"]},"metadata":{},"sourceType":"module"}