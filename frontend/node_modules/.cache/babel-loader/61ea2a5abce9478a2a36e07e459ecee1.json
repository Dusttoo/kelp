{"ast":null,"code":"import { csrfFetch } from './csrf';\nconst SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser';\n\nconst setUser = user => {\n  return {\n    type: SET_USER,\n    payload: user\n  };\n};\n\nconst removeUser = () => {\n  return {\n    type: REMOVE_USER\n  };\n};\n\nexport const login = user => async dispatch => {\n  const {\n    email,\n    password\n  } = user;\n  const response = await csrfFetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\nexport const restoreUser = () => async dispatch => {\n  const response = await csrfFetch('/api/session');\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\nexport const signup = user => async dispatch => {\n  const {\n    email,\n    firstName,\n    lastName,\n    profileImg,\n    password\n  } = user;\n  const response = await csrfFetch(\"/api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      firstName,\n      email,\n      password,\n      lastName,\n      profileImg\n    })\n  });\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\nexport const logout = () => async dispatch => {\n  const response = await csrfFetch('/api/session', {\n    method: 'DELETE'\n  });\n  dispatch(removeUser());\n  return response;\n};\nconst initialState = {\n  user: null\n};\n\nconst sessionReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case SET_USER:\n      newState = Object.assign({}, state);\n      newState.user = action.payload;\n      return newState;\n\n    case REMOVE_USER:\n      newState = Object.assign({}, state);\n      newState.user = null;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default sessionReducer;","map":{"version":3,"sources":["/Users/dusty/kelp/frontend/src/store/session.js"],"names":["csrfFetch","SET_USER","REMOVE_USER","setUser","user","type","payload","removeUser","login","dispatch","email","password","response","method","body","JSON","stringify","data","json","restoreUser","signup","firstName","lastName","profileImg","logout","initialState","sessionReducer","state","action","newState","Object","assign"],"mappings":"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","sourcesContent":["import { csrfFetch } from './csrf';\n\nconst SET_USER = 'session/setUser';\nconst REMOVE_USER = 'session/removeUser';\n\nconst setUser = (user) => {\n  return {\n    type: SET_USER,\n    payload: user,\n  };\n};\n\nconst removeUser = () => {\n  return {\n    type: REMOVE_USER,\n  };\n};\n\nexport const login = (user) => async (dispatch) => {\n  const { email, password } = user;\n  const response = await csrfFetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password,\n    }),\n  });\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\n\nexport const restoreUser = () => async dispatch => {\n  const response = await csrfFetch('/api/session');\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\n\nexport const signup = (user) => async (dispatch) => {\n  const { email, firstName, lastName, profileImg, password } = user;\n  const response = await csrfFetch(\"/api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      firstName,\n      email,\n      password,\n      lastName,\n      profileImg,\n    }),\n  });\n  const data = await response.json();\n  dispatch(setUser(data.user));\n  return response;\n};\n\n\nexport const logout = () => async (dispatch) => {\n  const response = await csrfFetch('/api/session', {\n    method: 'DELETE',\n  });\n  dispatch(removeUser());\n  return response;\n};\n\n\n\nconst initialState = { user: null };\n\nconst sessionReducer = (state = initialState, action) => {\n  let newState;\n  switch (action.type) {\n    case SET_USER:\n      newState = Object.assign({}, state);\n      newState.user = action.payload;\n      return newState;\n    case REMOVE_USER:\n      newState = Object.assign({}, state);\n      newState.user = null;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default sessionReducer;"]},"metadata":{},"sourceType":"module"}